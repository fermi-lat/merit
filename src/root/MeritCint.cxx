//
// File generated by C:\GLAST\Ground\tools\GLAST_external\ROOT\3.01.06\bin\rootcint at Tue Dec 18 16:31:34 2001.
// Do NOT change. Changes will be lost next time file is generated
//
#include "MeritCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

using namespace std;

//______________________________________________________________________________
TBuffer &operator>>(TBuffer &buf, meritFoM *&obj)
{
   // Read a pointer to an object of class meritFoM.

   obj = (meritFoM *) buf.ReadObject(meritFoM::Class());
   return buf;
}

//______________________________________________________________________________
void meritFoM::Streamer(TBuffer &R__b)
{
   // Stream an object of class meritFoM.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      //R__b >> m_FoM;
      //R__b >> m_tuple;
      R__b >> m_canvas;
      R__b >> m_pad;
      //R__b >> outstream;
      R__b.CheckByteCount(R__s, R__c, meritFoM::IsA());
   } else {
      R__c = R__b.WriteVersion(meritFoM::IsA(), kTRUE);
      TObject::Streamer(R__b);
      //R__b << m_FoM;
      //R__b << m_tuple;
      R__b << m_canvas;
      R__b << m_pad;
      //R__b << outstream;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void meritFoM::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
   // Inspect the data members of an object of class meritFoM.

   TClass *R__cl  = meritFoM::IsA();
   Int_t   R__ncp = strlen(R__parent);
   if (R__ncp || R__cl || R__insp.IsA()) { }
   R__insp.Inspect(R__cl, R__parent, "*m_FoM", &m_FoM);
   R__insp.Inspect(R__cl, R__parent, "*m_tuple", &m_tuple);
   R__insp.Inspect(R__cl, R__parent, "*m_canvas", &m_canvas);
   R__insp.Inspect(R__cl, R__parent, "*m_pad", &m_pad);
   R__insp.Inspect(R__cl, R__parent, "*outstream", &outstream);
   TObject::ShowMembers(R__insp, R__parent);
}

//______________________________________________________________________________
const char *meritFoM::Class_Name()
{
   // Return the class name for meritFoM.
   return "meritFoM";
}

// Static variable to hold initialization object
static meritFoM::R__Init __gR__InitmeritFoM(0);

/********************************************************
* MeritCint.cxx
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableMeritCint();

extern "C" void G__set_cpp_environmentMeritCint() {
  G__add_compiledheader("TROOT.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("analysis/Tuple.h");
  G__add_compiledheader("analysis/RebinHist.h");
  G__add_compiledheader("MultiPSF.h");
  G__add_compiledheader("PSFtailCuts.h");
  G__add_compiledheader("meritFoM.h");
  G__add_compiledheader("MeritPlots.h");
  G__cpp_reset_tagtableMeritCint();
}
class G__MeritCintdOcxx_tag {};

void* operator new(size_t size,G__MeritCintdOcxx_tag* p) {
  if(p && G__PVOID!=G__getgvp()) return((void*)p);
#ifndef G__ROOT
  return(malloc(size));
#else
  return(::operator new(size));
#endif
}

/* dummy, for exception */
#ifdef G__EH_DUMMY_DELETE
void operator delete(void *p,G__MeritCintdOcxx_tag* x) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}
#endif

static void G__operator_delete(void *p) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}

void G__DELDMY_MeritCintdOcxx() { G__operator_delete(0); }

extern "C" int G__cpp_dllrevMeritCint() { return(30051503); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TupleItem */
static int G__TupleItem_TupleItem_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TupleItem *p=NULL;
   if(G__getaryconstruct()) p=new TupleItem[G__getaryconstruct()];
   else p=::new((G__MeritCintdOcxx_tag*)G__getgvp()) TupleItem;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_TupleItem);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TupleItem_TupleItem_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TupleItem *p=NULL;
   switch(libp->paran) {
   case 2:
      p = ::new((G__MeritCintdOcxx_tag*)G__getgvp()) TupleItem(*(string*)libp->para[0].ref,(float)G__double(libp->para[1]));
      break;
   case 1:
      p = ::new((G__MeritCintdOcxx_tag*)G__getgvp()) TupleItem(*(string*)libp->para[0].ref);
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_TupleItem);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TupleItem_TupleItem_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TupleItem *p=NULL;
      p=::new((G__MeritCintdOcxx_tag*)G__getgvp()) TupleItem(*(string*)libp->para[0].ref,(float*)G__int(libp->para[1]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_TupleItem);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TupleItem_operatoreQ_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TupleItem*)(G__getstructoffset()))->operator=((float)G__double(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TupleItem_operatoroPcP_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const TupleItem*)(G__getstructoffset()))->operator()());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TupleItem_operatorsPfloat_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const TupleItem*)(G__getstructoffset()))->operator float());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TupleItem_name_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
const         string *pobj,xobj=((const TupleItem*)(G__getstructoffset()))->name();
        pobj=new string(xobj);
        result7->obj.i=(long)((void*)pobj); result7->ref=result7->obj.i;
        G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TupleItem_TupleItem_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TupleItem *p;
   p=new TupleItem(*(TupleItem*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_TupleItem);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TupleItem G__TTupleItem;
static int G__TupleItem_wATupleItem_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TupleItem *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((TupleItem *)((G__getstructoffset())+sizeof(TupleItem)*i))->~G__TTupleItem();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((TupleItem *)(G__getstructoffset()))->~G__TTupleItem();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Tuple */
static int G__Tuple_Tuple_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   Tuple *p=NULL;
      p=::new((G__MeritCintdOcxx_tag*)G__getgvp()) Tuple(*(string*)libp->para[0].ref);
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_Tuple);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Tuple_Tuple_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   Tuple *p=NULL;
   p=::new((G__MeritCintdOcxx_tag*)G__getgvp()) Tuple(*(std::istream*)libp->para[0].ref);
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_Tuple);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Tuple_nextStream_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Tuple*)(G__getstructoffset()))->nextStream(*(std::istream*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Tuple_setTitle_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Tuple*)(G__getstructoffset()))->setTitle(*(string*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Tuple_operatoroBcB_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Tuple*)(G__getstructoffset()))->operator[]((unsigned int)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Tuple_name_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)((const Tuple*)(G__getstructoffset()))->name((unsigned int)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Tuple_index_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const Tuple*)(G__getstructoffset()))->index(*(string*)libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Tuple_find_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((const Tuple*)(G__getstructoffset()))->find(*(string*)libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Tuple_fillArray_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((const Tuple*)(G__getstructoffset()))->fillArray((float*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Tuple_writeHeader_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((const Tuple*)(G__getstructoffset()))->writeHeader(*(std::ostream*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Tuple_title_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        const string& obj=((const Tuple*)(G__getstructoffset()))->title();
         result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Tuple_tupleItem_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((const Tuple*)(G__getstructoffset()))->tupleItem(*(string*)libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Tuple_nextEvent_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((Tuple*)(G__getstructoffset()))->nextEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Tuple_Tuple_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   Tuple *p;
   p=new Tuple(*(Tuple*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_Tuple);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Tuple G__TTuple;
static int G__Tuple_wATuple_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (Tuple *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((Tuple *)((G__getstructoffset())+sizeof(Tuple)*i))->~G__TTuple();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((Tuple *)(G__getstructoffset()))->~G__TTuple();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SampleStatistic */
static int G__SampleStatistic_SampleStatistic_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   SampleStatistic *p=NULL;
   if(G__getaryconstruct()) p=new SampleStatistic[G__getaryconstruct()];
   else p=::new((G__MeritCintdOcxx_tag*)G__getgvp()) SampleStatistic;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_SampleStatistic);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SampleStatistic_reset_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((SampleStatistic*)(G__getstructoffset()))->reset();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SampleStatistic_operatorpLeQ_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((SampleStatistic*)(G__getstructoffset()))->operator+=((double)G__double(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SampleStatistic_samples_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,108,(long)((const SampleStatistic*)(G__getstructoffset()))->samples());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SampleStatistic_mean_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const SampleStatistic*)(G__getstructoffset()))->mean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SampleStatistic_stdDev_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const SampleStatistic*)(G__getstructoffset()))->stdDev());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SampleStatistic_var_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const SampleStatistic*)(G__getstructoffset()))->var());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SampleStatistic_min_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const SampleStatistic*)(G__getstructoffset()))->min());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SampleStatistic_max_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const SampleStatistic*)(G__getstructoffset()))->max());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SampleStatistic_confidence_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const SampleStatistic*)(G__getstructoffset()))->confidence((int)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SampleStatistic_confidence_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const SampleStatistic*)(G__getstructoffset()))->confidence((double)G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SampleStatistic_SampleStatistic_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   SampleStatistic *p;
   p=new SampleStatistic(*(SampleStatistic*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_SampleStatistic);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SampleStatistic G__TSampleStatistic;
static int G__SampleStatistic_wASampleStatistic_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (SampleStatistic *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((SampleStatistic *)((G__getstructoffset())+sizeof(SampleStatistic)*i))->~G__TSampleStatistic();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((SampleStatistic *)(G__getstructoffset()))->~G__TSampleStatistic();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Histogram */
static int G__Histogram_Histogram_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   Histogram *p=NULL;
   switch(libp->paran) {
   case 4:
      p = ::new((G__MeritCintdOcxx_tag*)G__getgvp()) Histogram(
*((string*)G__int(libp->para[0])),(double)G__double(libp->para[1])
,(double)G__double(libp->para[2]),(double)G__double(libp->para[3]));
      break;
   case 3:
      p = ::new((G__MeritCintdOcxx_tag*)G__getgvp()) Histogram(
*((string*)G__int(libp->para[0])),(double)G__double(libp->para[1])
,(double)G__double(libp->para[2]));
      break;
   case 2:
      p = ::new((G__MeritCintdOcxx_tag*)G__getgvp()) Histogram(*((string*)G__int(libp->para[0])),(double)G__double(libp->para[1]));
      break;
   case 1:
      p = ::new((G__MeritCintdOcxx_tag*)G__getgvp()) Histogram(*((string*)G__int(libp->para[0])));
      break;
   case 0:
   if(G__getaryconstruct()) p=new Histogram[G__getaryconstruct()];
   else p=::new((G__MeritCintdOcxx_tag*)G__getgvp()) Histogram;
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_Histogram);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Histogram_fill_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__setnull(result7);
      ((Histogram*)(G__getstructoffset()))->fill((double)G__double(libp->para[0]),(double)G__double(libp->para[1]));
      break;
   case 1:
      G__setnull(result7);
      ((Histogram*)(G__getstructoffset()))->fill((double)G__double(libp->para[0]));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Histogram_operatorpLeQ_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Histogram*)(G__getstructoffset()))->operator+=((double)G__double(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Histogram_clear_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Histogram*)(G__getstructoffset()))->clear();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Histogram_setRange_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 3:
      G__setnull(result7);
      ((Histogram*)(G__getstructoffset()))->setRange((double)G__double(libp->para[0]),(double)G__double(libp->para[1])
,(double)G__double(libp->para[2]));
      break;
   case 2:
      G__setnull(result7);
      ((Histogram*)(G__getstructoffset()))->setRange((double)G__double(libp->para[0]),(double)G__double(libp->para[1]));
      break;
   case 1:
      G__setnull(result7);
      ((Histogram*)(G__getstructoffset()))->setRange((double)G__double(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((Histogram*)(G__getstructoffset()))->setRange();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Histogram_print_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((Histogram*)(G__getstructoffset()))->print(*(std::ostream*)libp->para[0].ref);
      break;
   case 0:
      G__setnull(result7);
      ((Histogram*)(G__getstructoffset()))->print();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Histogram_operatoroBcB_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Histogram*)(G__getstructoffset()))->operator[]((int)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Histogram_step_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Histogram*)(G__getstructoffset()))->step());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Histogram_to_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Histogram*)(G__getstructoffset()))->to());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Histogram_from_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Histogram*)(G__getstructoffset()))->from());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Histogram_total_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Histogram*)(G__getstructoffset()))->total());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Histogram_under_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Histogram*)(G__getstructoffset()))->under());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Histogram_over_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Histogram*)(G__getstructoffset()))->over());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Histogram_begin_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,70,(long)((const Histogram*)(G__getstructoffset()))->begin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Histogram_end_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,70,(long)((const Histogram*)(G__getstructoffset()))->end());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Histogram_next_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((Histogram*)(G__getstructoffset()))->next());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Histogram_setTitle_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Histogram*)(G__getstructoffset()))->setTitle(*(string*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Histogram_Histogram_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   Histogram *p;
   p=new Histogram(*(Histogram*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_Histogram);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Histogram G__THistogram;
static int G__Histogram_wAHistogram_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (Histogram *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((Histogram *)((G__getstructoffset())+sizeof(Histogram)*i))->~G__THistogram();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((Histogram *)(G__getstructoffset()))->~G__THistogram();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RebinHist */
static int G__RebinHist_RebinHist_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   RebinHist *p=NULL;
   switch(libp->paran) {
   case 4:
      p = ::new((G__MeritCintdOcxx_tag*)G__getgvp()) RebinHist(
(const char*)G__int(libp->para[0]),(double)G__double(libp->para[1])
,(double)G__double(libp->para[2]),(double)G__double(libp->para[3]));
      break;
   case 3:
      p = ::new((G__MeritCintdOcxx_tag*)G__getgvp()) RebinHist(
(const char*)G__int(libp->para[0]),(double)G__double(libp->para[1])
,(double)G__double(libp->para[2]));
      break;
   case 2:
      p = ::new((G__MeritCintdOcxx_tag*)G__getgvp()) RebinHist((const char*)G__int(libp->para[0]),(double)G__double(libp->para[1]));
      break;
   case 1:
      p = ::new((G__MeritCintdOcxx_tag*)G__getgvp()) RebinHist((const char*)G__int(libp->para[0]));
      break;
   case 0:
   if(G__getaryconstruct()) p=new RebinHist[G__getaryconstruct()];
   else p=::new((G__MeritCintdOcxx_tag*)G__getgvp()) RebinHist;
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_RebinHist);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RebinHist_rebin_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 3:
      G__setnull(result7);
      ((RebinHist*)(G__getstructoffset()))->rebin((double)G__double(libp->para[0]),(double)G__double(libp->para[1])
,(double)G__double(libp->para[2]));
      break;
   case 2:
      G__setnull(result7);
      ((RebinHist*)(G__getstructoffset()))->rebin((double)G__double(libp->para[0]),(double)G__double(libp->para[1]));
      break;
   case 1:
      G__setnull(result7);
      ((RebinHist*)(G__getstructoffset()))->rebin((double)G__double(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((RebinHist*)(G__getstructoffset()))->rebin();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RebinHist_fill_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((RebinHist*)(G__getstructoffset()))->fill((double)G__double(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RebinHist_percentile_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((RebinHist*)(G__getstructoffset()))->percentile((double)G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RebinHist_getDataVal_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((RebinHist*)(G__getstructoffset()))->getDataVal((int)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RebinHist_RebinHist_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   RebinHist *p;
   p=new RebinHist(*(RebinHist*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_RebinHist);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RebinHist G__TRebinHist;
static int G__RebinHist_wARebinHist_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (RebinHist *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((RebinHist *)((G__getstructoffset())+sizeof(RebinHist)*i))->~G__TRebinHist();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((RebinHist *)(G__getstructoffset()))->~G__TRebinHist();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Analyze */
static int G__Analyze_Analyze_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   Analyze *p=NULL;
   switch(libp->paran) {
   case 1:
      p = ::new((G__MeritCintdOcxx_tag*)G__getgvp()) Analyze(*((string*)G__int(libp->para[0])));
      break;
   case 0:
   if(G__getaryconstruct()) p=new Analyze[G__getaryconstruct()];
   else p=::new((G__MeritCintdOcxx_tag*)G__getgvp()) Analyze;
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_Analyze);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Analyze_Analyze_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   Analyze *p=NULL;
   switch(libp->paran) {
   case 3:
      p = ::new((G__MeritCintdOcxx_tag*)G__getgvp()) Analyze(
*(Tuple*)libp->para[0].ref,*(string*)libp->para[1].ref
,*(string*)libp->para[2].ref);
      break;
   case 2:
      p = ::new((G__MeritCintdOcxx_tag*)G__getgvp()) Analyze(*(Tuple*)libp->para[0].ref,*(string*)libp->para[1].ref);
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_Analyze);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Analyze_Analyze_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   Analyze *p=NULL;
   switch(libp->paran) {
   case 2:
      p = ::new((G__MeritCintdOcxx_tag*)G__getgvp()) Analyze(*(TupleItem*)libp->para[0].ref,*(string*)libp->para[1].ref);
      break;
   case 1:
      p = ::new((G__MeritCintdOcxx_tag*)G__getgvp()) Analyze(*(TupleItem*)libp->para[0].ref);
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_Analyze);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Analyze_operatoroPcP_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((Analyze*)(G__getstructoffset()))->operator()());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Analyze_count_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,104,(long)((const Analyze*)(G__getstructoffset()))->count());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Analyze_seen_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,104,(long)((const Analyze*)(G__getstructoffset()))->seen());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Analyze_item_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Analyze*)(G__getstructoffset()))->item());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Analyze_name_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        const string& obj=((const Analyze*)(G__getstructoffset()))->name();
         result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Analyze_getName_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)((Analyze*)(G__getstructoffset()))->getName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Analyze_getItem_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)((Analyze*)(G__getstructoffset()))->getItem());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Analyze_set_name_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Analyze*)(G__getstructoffset()))->set_name(*((string*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Analyze_set_tuple_item_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Analyze*)(G__getstructoffset()))->set_tuple_item(*(Tuple*)libp->para[0].ref,*((string*)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Analyze_report_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Analyze*)(G__getstructoffset()))->report(*(std::ostream*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Analyze_clear_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Analyze*)(G__getstructoffset()))->clear();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Analyze_separator_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__setnull(result7);
      ((Analyze*)(G__getstructoffset()))->separator(*(std::ostream*)libp->para[0].ref,(char)G__int(libp->para[1]));
      break;
   case 1:
      G__setnull(result7);
      ((Analyze*)(G__getstructoffset()))->separator(*(std::ostream*)libp->para[0].ref);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Analyze_make_label_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        string *pobj,xobj=((Analyze*)(G__getstructoffset()))->make_label(*(string*)libp->para[0].ref);
        pobj=new string(xobj);
        result7->obj.i=(long)((void*)pobj); result7->ref=result7->obj.i;
        G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Analyze_showperc_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((Analyze*)(G__getstructoffset()))->showperc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Analyze_showperc_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Analyze*)(G__getstructoffset()))->showperc((bool)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Analyze_Analyze_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   Analyze *p;
   p=new Analyze(*(Analyze*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_Analyze);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Analyze G__TAnalyze;
static int G__Analyze_wAAnalyze_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (Analyze *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((Analyze *)((G__getstructoffset())+sizeof(Analyze)*i))->~G__TAnalyze();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((Analyze *)(G__getstructoffset()))->~G__TAnalyze();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* PSFanalysis */
static int G__PSFanalysis_PSFanalysis_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   PSFanalysis *p=NULL;
   switch(libp->paran) {
   case 3:
      p = ::new((G__MeritCintdOcxx_tag*)G__getgvp()) PSFanalysis(
*(Tuple*)libp->para[0].ref,(double)G__double(libp->para[1])
,(double)G__double(libp->para[2]));
      break;
   case 2:
      p = ::new((G__MeritCintdOcxx_tag*)G__getgvp()) PSFanalysis(*(Tuple*)libp->para[0].ref,(double)G__double(libp->para[1]));
      break;
   case 1:
      p = ::new((G__MeritCintdOcxx_tag*)G__getgvp()) PSFanalysis(*(Tuple*)libp->para[0].ref);
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_PSFanalysis);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PSFanalysis_PSFanalysis_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   PSFanalysis *p=NULL;
   if(G__getaryconstruct()) p=new PSFanalysis[G__getaryconstruct()];
   else p=::new((G__MeritCintdOcxx_tag*)G__getgvp()) PSFanalysis;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_PSFanalysis);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PSFanalysis_report_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((PSFanalysis*)(G__getstructoffset()))->report(*(std::ostream*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PSFanalysis_clear_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((PSFanalysis*)(G__getstructoffset()))->clear();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PSFanalysis_count_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,104,(long)((const PSFanalysis*)(G__getstructoffset()))->count());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PSFanalysis_percentile_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((PSFanalysis*)(G__getstructoffset()))->percentile((double)G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PSFanalysis_sigma_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((PSFanalysis*)(G__getstructoffset()))->sigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PSFanalysis_minE_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((PSFanalysis*)(G__getstructoffset()))->minE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PSFanalysis_maxE_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((PSFanalysis*)(G__getstructoffset()))->maxE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PSFanalysis_meanE_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((PSFanalysis*)(G__getstructoffset()))->meanE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PSFanalysis_row_report_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((PSFanalysis*)(G__getstructoffset()))->row_report(*(std::ostream*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PSFanalysis_PSFanalysis_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   PSFanalysis *p;
   p=new PSFanalysis(*(PSFanalysis*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_PSFanalysis);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef PSFanalysis G__TPSFanalysis;
static int G__PSFanalysis_wAPSFanalysis_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (PSFanalysis *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((PSFanalysis *)((G__getstructoffset())+sizeof(PSFanalysis)*i))->~G__TPSFanalysis();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((PSFanalysis *)(G__getstructoffset()))->~G__TPSFanalysis();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MultiPSF */
static int G__MultiPSF_MultiPSF_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   MultiPSF *p=NULL;
      p=::new((G__MeritCintdOcxx_tag*)G__getgvp()) MultiPSF(*(Tuple*)libp->para[0].ref,(char)G__int(libp->para[1]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_MultiPSF);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MultiPSF_report_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((MultiPSF*)(G__getstructoffset()))->report(*(std::ostream*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MultiPSF_getListSize_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((MultiPSF*)(G__getstructoffset()))->getListSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MultiPSF_getListItem_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((MultiPSF*)(G__getstructoffset()))->getListItem((int)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MultiPSF_MultiPSF_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   MultiPSF *p;
   p=new MultiPSF(*(MultiPSF*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_MultiPSF);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MultiPSF G__TMultiPSF;
static int G__MultiPSF_wAMultiPSF_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (MultiPSF *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((MultiPSF *)((G__getstructoffset())+sizeof(MultiPSF)*i))->~G__TMultiPSF();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((MultiPSF *)(G__getstructoffset()))->~G__TMultiPSF();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AnalysisList */
static int G__AnalysisList_AnalysisList_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   AnalysisList *p=NULL;
   switch(libp->paran) {
   case 2:
      p = ::new((G__MeritCintdOcxx_tag*)G__getgvp()) AnalysisList(*((string*)G__int(libp->para[0])),(bool)G__int(libp->para[1]));
      break;
   case 1:
      p = ::new((G__MeritCintdOcxx_tag*)G__getgvp()) AnalysisList(*((string*)G__int(libp->para[0])));
      break;
   case 0:
   if(G__getaryconstruct()) p=new AnalysisList[G__getaryconstruct()];
   else p=::new((G__MeritCintdOcxx_tag*)G__getgvp()) AnalysisList;
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_AnalysisList);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisList_AnalysisList_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   AnalysisList *p=NULL;
      p=::new((G__MeritCintdOcxx_tag*)G__getgvp()) AnalysisList(*(AnalysisList*)libp->para[0].ref);
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_AnalysisList);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisList_report_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((AnalysisList*)(G__getstructoffset()))->report(*(std::ostream*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisList_clear_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((AnalysisList*)(G__getstructoffset()))->clear();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisList_getListSize_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((AnalysisList*)(G__getstructoffset()))->getListSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisList_getListItem_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((AnalysisList*)(G__getstructoffset()))->getListItem((int)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AnalysisList G__TAnalysisList;
static int G__AnalysisList_wAAnalysisList_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (AnalysisList *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((AnalysisList *)((G__getstructoffset())+sizeof(AnalysisList)*i))->~G__TAnalysisList();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((AnalysisList *)(G__getstructoffset()))->~G__TAnalysisList();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* PSFtailCuts */
static int G__PSFtailCuts_PSFtailCuts_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   PSFtailCuts *p=NULL;
      p=::new((G__MeritCintdOcxx_tag*)G__getgvp()) PSFtailCuts(*(Tuple*)libp->para[0].ref);
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_PSFtailCuts);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PSFtailCuts_PSFtailCuts_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   PSFtailCuts *p;
   p=new PSFtailCuts(*(PSFtailCuts*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_PSFtailCuts);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef PSFtailCuts G__TPSFtailCuts;
static int G__PSFtailCuts_wAPSFtailCuts_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (PSFtailCuts *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((PSFtailCuts *)((G__getstructoffset())+sizeof(PSFtailCuts)*i))->~G__TPSFtailCuts();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((PSFtailCuts *)(G__getstructoffset()))->~G__TPSFtailCuts();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FigureOfMerit */
static int G__FigureOfMerit_FigureOfMerit_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   FigureOfMerit *p=NULL;
   switch(libp->paran) {
   case 2:
      p = ::new((G__MeritCintdOcxx_tag*)G__getgvp()) FigureOfMerit(*(Tuple*)libp->para[0].ref,*((string*)G__int(libp->para[1])));
      break;
   case 1:
      p = ::new((G__MeritCintdOcxx_tag*)G__getgvp()) FigureOfMerit(*(Tuple*)libp->para[0].ref);
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_FigureOfMerit);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FigureOfMerit_setCuts_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((FigureOfMerit*)(G__getstructoffset()))->setCuts(*((string*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FigureOfMerit_execute_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((FigureOfMerit*)(G__getstructoffset()))->execute();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FigureOfMerit_report_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((FigureOfMerit*)(G__getstructoffset()))->report(*(std::ostream*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FigureOfMerit_accept_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((FigureOfMerit*)(G__getstructoffset()))->accept();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FigureOfMerit_accepted_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,104,(long)((const FigureOfMerit*)(G__getstructoffset()))->accepted());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FigureOfMerit_area_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((FigureOfMerit*)(G__getstructoffset()))->area());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FigureOfMerit_generated_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,104,(long)((FigureOfMerit*)(G__getstructoffset()))->generated());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FigureOfMerit_getAnalysisList_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((FigureOfMerit*)(G__getstructoffset()))->getAnalysisList());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__FigureOfMerit_FigureOfMerit_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   FigureOfMerit *p;
   p=new FigureOfMerit(*(FigureOfMerit*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_FigureOfMerit);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FigureOfMerit G__TFigureOfMerit;
static int G__FigureOfMerit_wAFigureOfMerit_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (FigureOfMerit *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((FigureOfMerit *)((G__getstructoffset())+sizeof(FigureOfMerit)*i))->~G__TFigureOfMerit();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((FigureOfMerit *)(G__getstructoffset()))->~G__TFigureOfMerit();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* meritFoM */
static int G__meritFoM_meritFoM_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   meritFoM *p=NULL;
      p = new meritFoM((const char*)G__int(libp->para[0]),(const char*)G__int(libp->para[1]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_meritFoM);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__meritFoM_execute_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((meritFoM*)(G__getstructoffset()))->execute();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__meritFoM_report_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((meritFoM*)(G__getstructoffset()))->report();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__meritFoM_getAnalysisListSize_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((meritFoM*)(G__getstructoffset()))->getAnalysisListSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__meritFoM_getAnalysisListItem_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((meritFoM*)(G__getstructoffset()))->getAnalysisListItem((int)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__meritFoM_getAnalysisList_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((meritFoM*)(G__getstructoffset()))->getAnalysisList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__meritFoM_Class_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((meritFoM*)(G__getstructoffset()))->Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__meritFoM_Class_Name_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)((meritFoM*)(G__getstructoffset()))->Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__meritFoM_Class_Version_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)((meritFoM*)(G__getstructoffset()))->Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__meritFoM_Dictionary_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((meritFoM*)(G__getstructoffset()))->Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__meritFoM_IsA_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((const meritFoM*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__meritFoM_ShowMembers_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((meritFoM*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__meritFoM_Streamer_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((meritFoM*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__meritFoM_StreamerNVirtual_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((meritFoM*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__meritFoM_DeclFileName_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)((meritFoM*)(G__getstructoffset()))->DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__meritFoM_DeclFileLine_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((meritFoM*)(G__getstructoffset()))->DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__meritFoM_ImplFileName_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)((meritFoM*)(G__getstructoffset()))->ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__meritFoM_ImplFileLine_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((meritFoM*)(G__getstructoffset()))->ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__meritFoM_meritFoM_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   meritFoM *p;
   p=new meritFoM(*(meritFoM*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_meritFoM);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef meritFoM G__TmeritFoM;
static int G__meritFoM_wAmeritFoM_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (meritFoM *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (meritFoM *)((G__getstructoffset())+sizeof(meritFoM)*i);
   else  delete (meritFoM *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MeritPlots */
static int G__MeritPlots_MeritPlots_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   MeritPlots *p=NULL;
      p=::new((G__MeritCintdOcxx_tag*)G__getgvp()) MeritPlots((const char*)G__int(libp->para[0]),(const char*)G__int(libp->para[1]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_MeritPlots);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MeritPlots_run_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((MeritPlots*)(G__getstructoffset()))->run();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MeritPlots_report_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((MeritPlots*)(G__getstructoffset()))->report();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MeritPlots_plotPSFvals_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((MeritPlots*)(G__getstructoffset()))->plotPSFvals((int)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((MeritPlots*)(G__getstructoffset()))->plotPSFvals();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MeritPlots_plotPSFvsE_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((MeritPlots*)(G__getstructoffset()))->plotPSFvsE((TPad*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((MeritPlots*)(G__getstructoffset()))->plotPSFvsE();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MeritPlots_surfPSFvsE_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((MeritPlots*)(G__getstructoffset()))->surfPSFvsE();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MeritPlots_plotPSFrat_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((MeritPlots*)(G__getstructoffset()))->plotPSFrat((TPad*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((MeritPlots*)(G__getstructoffset()))->plotPSFrat();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MeritPlots_getMeritFoM_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((MeritPlots*)(G__getstructoffset()))->getMeritFoM());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MeritPlots_getList_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((MeritPlots*)(G__getstructoffset()))->getList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MeritPlots_getListSize_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((MeritPlots*)(G__getstructoffset()))->getListSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MeritPlots_getListObj_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((MeritPlots*)(G__getstructoffset()))->getListObj((int)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MeritPlots_MeritPlots_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   MeritPlots *p;
   p=new MeritPlots(*(MeritPlots*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__MeritCintLN_MeritPlots);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MeritPlots G__TMeritPlots;
static int G__MeritPlots_wAMeritPlots_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (MeritPlots *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((MeritPlots *)((G__getstructoffset())+sizeof(MeritPlots)*i))->~G__TMeritPlots();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((MeritPlots *)(G__getstructoffset()))->~G__TMeritPlots();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TupleItem */

/* Tuple */

/* SampleStatistic */

/* Histogram */

/* RebinHist */

/* Analyze */

/* PSFanalysis */

/* MultiPSF */

/* AnalysisList */

/* PSFtailCuts */

/* FigureOfMerit */

/* meritFoM */

/* MeritPlots */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMeritCint {
 public:
  G__Sizep2memfuncMeritCint() {p=&G__Sizep2memfuncMeritCint::sizep2memfunc;}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMeritCint::*p)();
};

size_t G__get_sizep2memfuncMeritCint()
{
  G__Sizep2memfuncMeritCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMeritCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MeritCintLN_Tuple))) {
     Tuple *G__Lderived;
     G__Lderived=(Tuple*)0x1000;
     {
       vector<TupleItem*,allocator<TupleItem*> > *G__Lpbase=(vector<TupleItem*,allocator<TupleItem*> >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MeritCintLN_Tuple),G__get_linked_tagnum(&G__MeritCintLN_vectorlETupleItemmUcOallocatorlETupleItemmUgRsPgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MeritCintLN_Histogram))) {
     Histogram *G__Lderived;
     G__Lderived=(Histogram*)0x1000;
     {
       SampleStatistic *G__Lpbase=(SampleStatistic*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MeritCintLN_Histogram),G__get_linked_tagnum(&G__MeritCintLN_SampleStatistic),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MeritCintLN_RebinHist))) {
     RebinHist *G__Lderived;
     G__Lderived=(RebinHist*)0x1000;
     {
       Histogram *G__Lpbase=(Histogram*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MeritCintLN_RebinHist),G__get_linked_tagnum(&G__MeritCintLN_Histogram),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       SampleStatistic *G__Lpbase=(SampleStatistic*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MeritCintLN_RebinHist),G__get_linked_tagnum(&G__MeritCintLN_SampleStatistic),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MeritCintLN_PSFanalysis))) {
     PSFanalysis *G__Lderived;
     G__Lderived=(PSFanalysis*)0x1000;
     {
       Analyze *G__Lpbase=(Analyze*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MeritCintLN_PSFanalysis),G__get_linked_tagnum(&G__MeritCintLN_Analyze),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       RebinHist *G__Lpbase=(RebinHist*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MeritCintLN_PSFanalysis),G__get_linked_tagnum(&G__MeritCintLN_RebinHist),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       Histogram *G__Lpbase=(Histogram*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MeritCintLN_PSFanalysis),G__get_linked_tagnum(&G__MeritCintLN_Histogram),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       SampleStatistic *G__Lpbase=(SampleStatistic*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MeritCintLN_PSFanalysis),G__get_linked_tagnum(&G__MeritCintLN_SampleStatistic),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MeritCintLN_MultiPSF))) {
     MultiPSF *G__Lderived;
     G__Lderived=(MultiPSF*)0x1000;
     {
       Analyze *G__Lpbase=(Analyze*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MeritCintLN_MultiPSF),G__get_linked_tagnum(&G__MeritCintLN_Analyze),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       vector<PSFanalysis*,allocator<PSFanalysis*> > *G__Lpbase=(vector<PSFanalysis*,allocator<PSFanalysis*> >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MeritCintLN_MultiPSF),G__get_linked_tagnum(&G__MeritCintLN_vectorlEPSFanalysismUcOallocatorlEPSFanalysismUgRsPgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MeritCintLN_AnalysisList))) {
     AnalysisList *G__Lderived;
     G__Lderived=(AnalysisList*)0x1000;
     {
       Analyze *G__Lpbase=(Analyze*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MeritCintLN_AnalysisList),G__get_linked_tagnum(&G__MeritCintLN_Analyze),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       vector<Analyze*,allocator<Analyze*> > *G__Lpbase=(vector<Analyze*,allocator<Analyze*> >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MeritCintLN_AnalysisList),G__get_linked_tagnum(&G__MeritCintLN_vectorlEAnalyzemUcOallocatorlEAnalyzemUgRsPgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MeritCintLN_PSFtailCuts))) {
     PSFtailCuts *G__Lderived;
     G__Lderived=(PSFtailCuts*)0x1000;
     {
       AnalysisList *G__Lpbase=(AnalysisList*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MeritCintLN_PSFtailCuts),G__get_linked_tagnum(&G__MeritCintLN_AnalysisList),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       Analyze *G__Lpbase=(Analyze*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MeritCintLN_PSFtailCuts),G__get_linked_tagnum(&G__MeritCintLN_Analyze),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       vector<Analyze*,allocator<Analyze*> > *G__Lpbase=(vector<Analyze*,allocator<Analyze*> >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MeritCintLN_PSFtailCuts),G__get_linked_tagnum(&G__MeritCintLN_vectorlEAnalyzemUcOallocatorlEAnalyzemUgRsPgR),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MeritCintLN_meritFoM))) {
     meritFoM *G__Lderived;
     G__Lderived=(meritFoM*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MeritCintLN_meritFoM),G__get_linked_tagnum(&G__MeritCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMeritCint() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,
-1);
   G__setnewtype(-1,"Signed Character 1 byte",0);
   G__search_typename2("UChar_t",98,-1,0,
-1);
   G__setnewtype(-1,"Unsigned Character 1 byte",0);
   G__search_typename2("Short_t",115,-1,0,
-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes",0);
   G__search_typename2("UShort_t",114,-1,0,
-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes",0);
   G__search_typename2("Int_t",105,-1,0,
-1);
   G__setnewtype(-1,"Signed integer 4 bytes",0);
   G__search_typename2("UInt_t",104,-1,0,
-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes",0);
   G__search_typename2("Seek_t",105,-1,0,
-1);
   G__setnewtype(-1,"File pointer",0);
   G__search_typename2("Long_t",108,-1,0,
-1);
   G__setnewtype(-1,"Signed long integer 4 bytes",0);
   G__search_typename2("ULong_t",107,-1,0,
-1);
   G__setnewtype(-1,"Unsigned long integer 4 bytes",0);
   G__search_typename2("Float_t",102,-1,0,
-1);
   G__setnewtype(-1,"Float 4 bytes",0);
   G__search_typename2("Double_t",100,-1,0,
-1);
   G__setnewtype(-1,"Float 8 bytes",0);
   G__search_typename2("Text_t",99,-1,0,
-1);
   G__setnewtype(-1,"General string",0);
   G__search_typename2("Bool_t",98,-1,0,
-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true)",0);
   G__search_typename2("Byte_t",98,-1,0,
-1);
   G__setnewtype(-1,"Byte (8 bits)",0);
   G__search_typename2("Version_t",115,-1,0,
-1);
   G__setnewtype(-1,"Class version identifier",0);
   G__search_typename2("Option_t",99,-1,0,
-1);
   G__setnewtype(-1,"Option string",0);
   G__search_typename2("Ssiz_t",105,-1,0,
-1);
   G__setnewtype(-1,"String size",0);
   G__search_typename2("Real_t",102,-1,0,
-1);
   G__setnewtype(-1,"TVector and TMatrix element type",0);
   G__search_typename2("Streamer_t",89,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("VoidFuncPtr_t",89,-1,0,
-1);
   G__setnewtype(-1,"pointer to void function",0);
   G__search_typename2("FreeHookFun_t",89,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ReAllocFun_t",81,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ReAllocCFun_t",81,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Axis_t",100,-1,0,
-1);
   G__setnewtype(-1,"Axis values type",0);
   G__search_typename2("Stat_t",100,-1,0,
-1);
   G__setnewtype(-1,"Statistics type",0);
   G__search_typename2("vector<TupleItem*>",117,G__get_linked_tagnum(&G__MeritCintLN_vectorlETupleItemmUcOallocatorlETupleItemmUgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.13 2001/05/17 10:57:56 rdm Exp $",0);
   G__search_typename2("value_type",85,G__get_linked_tagnum(&G__MeritCintLN_TupleItem),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlETupleItemmUcOallocatorlETupleItemmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator",85,G__get_linked_tagnum(&G__MeritCintLN_TupleItem),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlETupleItemmUcOallocatorlETupleItemmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",85,G__get_linked_tagnum(&G__MeritCintLN_TupleItem),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlETupleItemmUcOallocatorlETupleItemmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__MeritCintLN_TupleItem),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlETupleItemmUcOallocatorlETupleItemmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__MeritCintLN_TupleItem),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlETupleItemmUcOallocatorlETupleItemmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",85,G__get_linked_tagnum(&G__MeritCintLN_TupleItem),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlETupleItemmUcOallocatorlETupleItemmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",85,G__get_linked_tagnum(&G__MeritCintLN_TupleItem),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlETupleItemmUcOallocatorlETupleItemmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,
G__get_linked_tagnum(&G__MeritCintLN_vectorlETupleItemmUcOallocatorlETupleItemmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,
G__get_linked_tagnum(&G__MeritCintLN_vectorlETupleItemmUcOallocatorlETupleItemmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("_Ranit<TupleItem*,difference_type>",117,G__get_linked_tagnum(&G__MeritCintLN__RanitlETupleItemmUcOlonggR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.13 2001/05/17 10:57:56 rdm Exp $",0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__MeritCintLN_vectorlETupleItemmUcOallocatorlETupleItemmUgRsPgRcLcLreverse_iterator),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlETupleItemmUcOallocatorlETupleItemmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<float>",117,G__get_linked_tagnum(&G__MeritCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.13 2001/05/17 10:57:56 rdm Exp $",0);
   G__search_typename2("value_type",102,-1,0,
G__get_linked_tagnum(&G__MeritCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator",70,-1,0,
G__get_linked_tagnum(&G__MeritCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",70,-1,0,
G__get_linked_tagnum(&G__MeritCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",70,-1,0,
G__get_linked_tagnum(&G__MeritCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",70,-1,0,
G__get_linked_tagnum(&G__MeritCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",102,-1,0,
G__get_linked_tagnum(&G__MeritCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",102,-1,0,
G__get_linked_tagnum(&G__MeritCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,
G__get_linked_tagnum(&G__MeritCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,
G__get_linked_tagnum(&G__MeritCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("_Ranit<float,difference_type>",117,G__get_linked_tagnum(&G__MeritCintLN__RanitlEfloatcOlonggR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.13 2001/05/17 10:57:56 rdm Exp $",0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__MeritCintLN_vectorlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",70,-1,0,
G__get_linked_tagnum(&G__MeritCintLN_Histogram));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("FloatList",117,G__get_linked_tagnum(&G__MeritCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,G__get_linked_tagnum(&G__MeritCintLN_RebinHist));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<PSFanalysis*>",117,G__get_linked_tagnum(&G__MeritCintLN_vectorlEPSFanalysismUcOallocatorlEPSFanalysismUgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.13 2001/05/17 10:57:56 rdm Exp $",0);
   G__search_typename2("value_type",85,G__get_linked_tagnum(&G__MeritCintLN_PSFanalysis),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlEPSFanalysismUcOallocatorlEPSFanalysismUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator",85,G__get_linked_tagnum(&G__MeritCintLN_PSFanalysis),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlEPSFanalysismUcOallocatorlEPSFanalysismUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",85,G__get_linked_tagnum(&G__MeritCintLN_PSFanalysis),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlEPSFanalysismUcOallocatorlEPSFanalysismUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__MeritCintLN_PSFanalysis),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlEPSFanalysismUcOallocatorlEPSFanalysismUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__MeritCintLN_PSFanalysis),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlEPSFanalysismUcOallocatorlEPSFanalysismUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",85,G__get_linked_tagnum(&G__MeritCintLN_PSFanalysis),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlEPSFanalysismUcOallocatorlEPSFanalysismUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",85,G__get_linked_tagnum(&G__MeritCintLN_PSFanalysis),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlEPSFanalysismUcOallocatorlEPSFanalysismUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,
G__get_linked_tagnum(&G__MeritCintLN_vectorlEPSFanalysismUcOallocatorlEPSFanalysismUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,
G__get_linked_tagnum(&G__MeritCintLN_vectorlEPSFanalysismUcOallocatorlEPSFanalysismUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("_Ranit<PSFanalysis*,difference_type>",117,G__get_linked_tagnum(&G__MeritCintLN__RanitlEPSFanalysismUcOlonggR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.13 2001/05/17 10:57:56 rdm Exp $",0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__MeritCintLN_vectorlEPSFanalysismUcOallocatorlEPSFanalysismUgRsPgRcLcLreverse_iterator),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlEPSFanalysismUcOallocatorlEPSFanalysismUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Analyze*>",117,G__get_linked_tagnum(&G__MeritCintLN_vectorlEAnalyzemUcOallocatorlEAnalyzemUgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.13 2001/05/17 10:57:56 rdm Exp $",0);
   G__search_typename2("value_type",85,G__get_linked_tagnum(&G__MeritCintLN_Analyze),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlEAnalyzemUcOallocatorlEAnalyzemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator",85,G__get_linked_tagnum(&G__MeritCintLN_Analyze),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlEAnalyzemUcOallocatorlEAnalyzemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",85,G__get_linked_tagnum(&G__MeritCintLN_Analyze),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlEAnalyzemUcOallocatorlEAnalyzemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__MeritCintLN_Analyze),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlEAnalyzemUcOallocatorlEAnalyzemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__MeritCintLN_Analyze),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlEAnalyzemUcOallocatorlEAnalyzemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",85,G__get_linked_tagnum(&G__MeritCintLN_Analyze),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlEAnalyzemUcOallocatorlEAnalyzemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",85,G__get_linked_tagnum(&G__MeritCintLN_Analyze),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlEAnalyzemUcOallocatorlEAnalyzemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,
G__get_linked_tagnum(&G__MeritCintLN_vectorlEAnalyzemUcOallocatorlEAnalyzemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,
G__get_linked_tagnum(&G__MeritCintLN_vectorlEAnalyzemUcOallocatorlEAnalyzemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("_Ranit<Analyze*,difference_type>",117,G__get_linked_tagnum(&G__MeritCintLN__RanitlEAnalyzemUcOlonggR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.13 2001/05/17 10:57:56 rdm Exp $",0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__MeritCintLN_vectorlEAnalyzemUcOallocatorlEAnalyzemUgRsPgRcLcLreverse_iterator),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlEAnalyzemUcOallocatorlEAnalyzemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<LayerGroup>",117,G__get_linked_tagnum(&G__MeritCintLN_vectorlELayerGroupcOallocatorlELayerGroupgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.13 2001/05/17 10:57:56 rdm Exp $",0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__MeritCintLN_LayerGroup),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlELayerGroupcOallocatorlELayerGroupgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator",85,G__get_linked_tagnum(&G__MeritCintLN_LayerGroup),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlELayerGroupcOallocatorlELayerGroupgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",85,G__get_linked_tagnum(&G__MeritCintLN_LayerGroup),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlELayerGroupcOallocatorlELayerGroupgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__MeritCintLN_LayerGroup),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlELayerGroupcOallocatorlELayerGroupgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__MeritCintLN_LayerGroup),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlELayerGroupcOallocatorlELayerGroupgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__MeritCintLN_LayerGroup),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlELayerGroupcOallocatorlELayerGroupgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__MeritCintLN_LayerGroup),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlELayerGroupcOallocatorlELayerGroupgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,
G__get_linked_tagnum(&G__MeritCintLN_vectorlELayerGroupcOallocatorlELayerGroupgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,
G__get_linked_tagnum(&G__MeritCintLN_vectorlELayerGroupcOallocatorlELayerGroupgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("_Ranit<LayerGroup,difference_type>",117,G__get_linked_tagnum(&G__MeritCintLN__RanitlELayerGroupcOlonggR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.13 2001/05/17 10:57:56 rdm Exp $",0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__MeritCintLN_vectorlELayerGroupcOallocatorlELayerGroupgRsPgRcLcLreverse_iterator),0,G__get_linked_tagnum(&G__MeritCintLN_vectorlELayerGroupcOallocatorlELayerGroupgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Font_t",115,-1,0,
-1);
   G__setnewtype(-1,"Font number",0);
   G__search_typename2("Style_t",115,-1,0,
-1);
   G__setnewtype(-1,"Style number",0);
   G__search_typename2("Marker_t",115,-1,0,
-1);
   G__setnewtype(-1,"Marker number",0);
   G__search_typename2("Width_t",115,-1,0,
-1);
   G__setnewtype(-1,"Line width",0);
   G__search_typename2("Color_t",115,-1,0,
-1);
   G__setnewtype(-1,"Color number",0);
   G__search_typename2("SCoord_t",115,-1,0,
-1);
   G__setnewtype(-1,"Screen coordinates",0);
   G__search_typename2("Coord_t",100,-1,0,
-1);
   G__setnewtype(-1,"Pad world coordinates",0);
   G__search_typename2("Angle_t",102,-1,0,
-1);
   G__setnewtype(-1,"Graphics angle",0);
   G__search_typename2("Size_t",102,-1,0,
-1);
   G__setnewtype(-1,"Attribute size",0);
   G__search_typename2("Handle_t",107,-1,0,
-1);
   G__setnewtype(-1,"Generic resource handle",0);
   G__search_typename2("Display_t",107,-1,0,
-1);
   G__setnewtype(-1,"Display handle",0);
   G__search_typename2("Window_t",107,-1,0,
-1);
   G__setnewtype(-1,"Window handle",0);
   G__search_typename2("Pixmap_t",107,-1,0,
-1);
   G__setnewtype(-1,"Pixmap handle",0);
   G__search_typename2("Drawable_t",107,-1,0,
-1);
   G__setnewtype(-1,"Drawable handle",0);
   G__search_typename2("Region_t",107,-1,0,
-1);
   G__setnewtype(-1,"Region handle",0);
   G__search_typename2("Colormap_t",107,-1,0,
-1);
   G__setnewtype(-1,"Colormap handle",0);
   G__search_typename2("Cursor_t",107,-1,0,
-1);
   G__setnewtype(-1,"Cursor handle",0);
   G__search_typename2("FontH_t",107,-1,0,
-1);
   G__setnewtype(-1,"Font handle (as opposed to Font_t which is an index)",0);
   G__search_typename2("KeySym_t",107,-1,0,
-1);
   G__setnewtype(-1,"Key symbol handle",0);
   G__search_typename2("Atom_t",107,-1,0,
-1);
   G__setnewtype(-1,"WM token",0);
   G__search_typename2("GContext_t",107,-1,0,
-1);
   G__setnewtype(-1,"Graphics context handle (or pointer, needs to be long)",0);
   G__search_typename2("FontStruct_t",107,-1,0,
-1);
   G__setnewtype(-1,"Pointer to font structure",0);
   G__search_typename2("Mask_t",104,-1,0,
-1);
   G__setnewtype(-1,"Structure mask type",0);
   G__search_typename2("Time_t",107,-1,0,
-1);
   G__setnewtype(-1,"Event time",0);
   G__search_typename2("Int_t (*)(const char*xact, Int_t nb, void**ar, Int_t*iret)",81,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TupleItem */
static void G__setup_memvarTupleItem(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MeritCintLN_TupleItem));
   { TupleItem *p; p=(TupleItem*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MeritCintLN_string),-1,-1,4,"m_name=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,-1,-1,4,"datum=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,70,0,0,-1,-1,-1,4,"m_pdatum=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Tuple */
static void G__setup_memvarTuple(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MeritCintLN_Tuple));
   { Tuple *p; p=(Tuple*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MeritCintLN_string),-1,-1,4,"m_title=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MeritCintLN_Tuple),-1,-2,4,"s_currentTuple=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SampleStatistic */
static void G__setup_memvarSampleStatistic(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MeritCintLN_SampleStatistic));
   { SampleStatistic *p; p=(SampleStatistic*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,107,0,0,-1,-1,-1,2,"n=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"x=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"x2=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"minValue=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,2,"maxValue=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Histogram */
static void G__setup_memvarHistogram(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MeritCintLN_Histogram));
   { Histogram *p; p=(Histogram*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MeritCintLN_string),-1,-1,4,"m_title=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"m_from=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"m_to=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"m_step=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,104,0,0,-1,-1,-1,4,"m_bins=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MeritCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,4,"m_hist=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"m_total=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"m_under=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"m_over=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MeritCintLN_Histogram),-1,-1,4,"m_next=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* RebinHist */
static void G__setup_memvarRebinHist(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MeritCintLN_RebinHist));
   { RebinHist *p; p=(RebinHist*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MeritCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("FloatList"),-1,4,"m_data=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Analyze */
static void G__setup_memvarAnalyze(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MeritCintLN_Analyze));
   { Analyze *p; p=(Analyze*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,104,0,0,-1,-1,-1,4,"m_count=",0,"keep track of success");
   G__memvar_setup((void*)NULL,85,0,1,G__get_linked_tagnum(&G__MeritCintLN_TupleItem),-1,-1,4,"m_tupleItem=",0,"the tuple item to analyze or cut.");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MeritCintLN_string),-1,-1,4,"m_name=",0,"name to describe this");
   G__memvar_setup((void*)NULL,104,0,0,-1,-1,-1,4,"m_seen=",0,"number of events seen (for making ratios)");
   G__memvar_setup((void*)NULL,105,0,0,G__get_linked_tagnum(&G__MeritCintLN_bool),-1,-2,4,"s_showperc=",0,"flag to determine whether percentages are shown");
   }
   G__tag_memvar_reset();
}


   /* PSFanalysis */
static void G__setup_memvarPSFanalysis(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MeritCintLN_PSFanalysis));
   { PSFanalysis *p; p=(PSFanalysis*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"m_sigma=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MeritCintLN_Analyze),-1,-1,4,"m_energy=",0,"access to energy");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MeritCintLN_Analyze),-1,-1,4,"m_first_layer=",0,"access to (fit) conversion layer");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MeritCintLN_SampleStatistic),-1,-1,4,"m_loge=",0,"histogra");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"m_emin=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"m_emax=",0,"optional energy cuts to apply");
   }
   G__tag_memvar_reset();
}


   /* MultiPSF */
static void G__setup_memvarMultiPSF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MeritCintLN_MultiPSF));
   { MultiPSF *p; p=(MultiPSF*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-1,4,"m_bin_size=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MeritCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,4,"m_costheta_bin=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AnalysisList */
static void G__setup_memvarAnalysisList(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MeritCintLN_AnalysisList));
   { AnalysisList *p; p=(AnalysisList*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,105,0,0,G__get_linked_tagnum(&G__MeritCintLN_bool),-1,-1,4,"m_noline=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* PSFtailCuts */
static void G__setup_memvarPSFtailCuts(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MeritCintLN_PSFtailCuts));
   { PSFtailCuts *p; p=(PSFtailCuts*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* FigureOfMerit */
static void G__setup_memvarFigureOfMerit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MeritCintLN_FigureOfMerit));
   { FigureOfMerit *p; p=(FigureOfMerit*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MeritCintLN_AnalysisList),-1,-1,4,"m_cuts=",0,"list of cuts to employ in analysis");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__MeritCintLN_vectorlELayerGroupcOallocatorlELayerGroupgRsPgR),G__defined_typename("vector<LayerGroup>"),-1,4,"m_layers=",0,"PSF analysis objects, for range of layers");
   G__memvar_setup((void*)NULL,104,0,0,-1,-1,-1,4,"m_accepted=",0,"number passing analysis cuts");
   G__memvar_setup((void*)NULL,85,0,1,G__get_linked_tagnum(&G__MeritCintLN_Tuple),-1,-2,4,"s_tuple=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,104,0,0,-1,-1,-2,4,"s_generated=",0,"number generated, from tuple title");
   G__memvar_setup((void*)NULL,100,0,0,-1,-1,-2,4,"s_area=",0,"cross-sectional area, from title");
   }
   G__tag_memvar_reset();
}


   /* meritFoM */
static void G__setup_memvarmeritFoM(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MeritCintLN_meritFoM));
   { meritFoM *p; p=(meritFoM*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MeritCintLN_FigureOfMerit),-1,-1,4,"m_FoM=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MeritCintLN_RootTuple),-1,-1,4,"m_tuple=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MeritCintLN_TCanvas),-1,-1,4,"m_canvas=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MeritCintLN_TPad),-1,-1,4,"m_pad=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MeritCintLN_ostream),-1,-1,4,"outstream=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MeritCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MeritPlots */
static void G__setup_memvarMeritPlots(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MeritCintLN_MeritPlots));
   { MeritPlots *p; p=(MeritPlots*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MeritCintLN_meritFoM),-1,-1,4,"merit=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__MeritCintLN_TCanvas),-1,-1,4,"pCan=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,2,0,G__get_linked_tagnum(&G__MeritCintLN_TPad),-1,-1,4,"pads=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,4,"nPads=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,4,"numPadsX=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,-1,-1,4,"numPadsY=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMeritCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTupleItem(void) {
   /* TupleItem */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MeritCintLN_TupleItem));
   G__memfunc_setup("TupleItem",921,G__TupleItem_TupleItem_0_0,105,G__get_linked_tagnum(&G__MeritCintLN_TupleItem),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TupleItem",921,G__TupleItem_TupleItem_1_0,105,G__get_linked_tagnum(&G__MeritCintLN_TupleItem),-1,0,2,1,1,0,
"u 'string' - 11 - name f - - 0 0 x",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TupleItem",921,G__TupleItem_TupleItem_2_0,105,G__get_linked_tagnum(&G__MeritCintLN_TupleItem),-1,0,2,1,1,0,
"u 'string' - 11 - name F - - 0 - x",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("operator=",937,G__TupleItem_operatoreQ_3_0,121,-1,-1,0,1,1,1,0,"f - - 0 - x",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("operator()",957,G__TupleItem_operatoroPcP_4_0,102,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("operator float",1442,G__TupleItem_operatorsPfloat_5_0,102,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("name",417,G__TupleItem_name_6_0,117,G__get_linked_tagnum(&G__MeritCintLN_string),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("operator()",957,(G__InterfaceMethod)NULL,102,-1,-1,1,0,1,4,0,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("TupleItem",921,G__TupleItem_TupleItem_8_0,(int)('i'),G__get_linked_tagnum(&G__MeritCintLN_TupleItem),-1,0,1,1,1,0,"u 'TupleItem' - 1 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TupleItem",1047,G__TupleItem_wATupleItem_9_0,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTuple(void) {
   /* Tuple */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MeritCintLN_Tuple));
   G__memfunc_setup("Tuple",522,G__Tuple_Tuple_0_0,105,G__get_linked_tagnum(&G__MeritCintLN_Tuple),-1,0,1,1,1,0,"u 'string' - 11 - title",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Tuple",522,G__Tuple_Tuple_1_0,105,G__get_linked_tagnum(&G__MeritCintLN_Tuple),-1,0,1,1,1,0,"u 'istream' - 1 - in",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("nextStream",1067,G__Tuple_nextStream_2_0,121,-1,-1,0,1,1,1,0,"u 'istream' - 1 - in",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("setTitle",846,G__Tuple_setTitle_3_0,121,-1,-1,0,1,1,1,0,"u 'string' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("operator[]",1060,G__Tuple_operatoroBcB_4_0,102,-1,-1,0,1,1,1,8,"h - - 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("name",417,G__Tuple_name_5_0,67,-1,-1,0,1,1,1,9,"h - - 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("index",536,G__Tuple_index_6_0,105,-1,-1,0,1,1,1,8,"u 'string' - 11 - name",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("find",417,G__Tuple_find_7_0,85,G__get_linked_tagnum(&G__MeritCintLN_TupleItem),G__defined_typename("vector<TupleItem*,allocator<TupleItem*> >::const_iterator"),2,1,1,1,8,"u 'string' - 11 - name",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("fillArray",934,G__Tuple_fillArray_8_0,121,-1,-1,0,1,1,1,8,"F - - 0 - array",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("writeHeader",1140,G__Tuple_writeHeader_9_0,121,-1,-1,0,1,1,1,8,"u 'ostream' - 1 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("title",546,G__Tuple_title_1_1,117,G__get_linked_tagnum(&G__MeritCintLN_string),-1,1,0,1,1,9,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("tupleItem",953,G__Tuple_tupleItem_2_1,85,G__get_linked_tagnum(&G__MeritCintLN_TupleItem),-1,0,1,1,1,9,"u 'string' - 11 - name",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("nextEvent",961,G__Tuple_nextEvent_3_1,105,G__get_linked_tagnum(&G__MeritCintLN_bool),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic copy constructor
   G__memfunc_setup("Tuple",522,G__Tuple_Tuple_4_1,(int)('i'),G__get_linked_tagnum(&G__MeritCintLN_Tuple),-1,0,1,1,1,0,"u 'Tuple' - 1 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~Tuple",648,G__Tuple_wATuple_5_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSampleStatistic(void) {
   /* SampleStatistic */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MeritCintLN_SampleStatistic));
   G__memfunc_setup("SampleStatistic",1562,G__SampleStatistic_SampleStatistic_0_0,105,G__get_linked_tagnum(&G__MeritCintLN_SampleStatistic),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("reset",547,G__SampleStatistic_reset_2_0,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("operator+=",980,G__SampleStatistic_operatorpLeQ_3_0,121,-1,-1,0,1,1,1,0,"d - - 0 - -",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("samples",757,G__SampleStatistic_samples_4_0,108,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("mean",417,G__SampleStatistic_mean_5_0,100,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("stdDev",618,G__SampleStatistic_stdDev_6_0,100,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("var",329,G__SampleStatistic_var_7_0,100,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("min",324,G__SampleStatistic_min_8_0,100,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("max",326,G__SampleStatistic_max_9_0,100,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("confidence",1038,G__SampleStatistic_confidence_0_1,100,-1,-1,0,1,1,1,8,"i - - 0 - p_percentage",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("confidence",1038,G__SampleStatistic_confidence_1_1,100,-1,-1,0,1,1,1,8,"d - - 0 - p_value",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("SampleStatistic",1562,G__SampleStatistic_SampleStatistic_2_1,(int)('i'),G__get_linked_tagnum(&G__MeritCintLN_SampleStatistic),-1,0,1,1,1,0,"u 'SampleStatistic' - 1 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~SampleStatistic",1688,G__SampleStatistic_wASampleStatistic_3_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHistogram(void) {
   /* Histogram */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MeritCintLN_Histogram));
   G__memfunc_setup("Histogram",942,G__Histogram_Histogram_0_0,105,G__get_linked_tagnum(&G__MeritCintLN_Histogram),-1,0,4,1,1,0,
"u 'string' - 0 \"default\" title d - - 0 0 from "
"d - - 0 1 to d - - 0 0.1 step",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("fill",423,G__Histogram_fill_2_0,121,-1,-1,0,2,1,1,0,
"d - - 0 - x d - - 0 1.0 w",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("operator+=",980,G__Histogram_operatorpLeQ_3_0,121,-1,-1,0,1,1,1,0,"d - - 0 - x",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("clear",519,G__Histogram_clear_4_0,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("setRange",825,G__Histogram_setRange_5_0,121,-1,-1,0,3,1,1,0,
"d - - 0 0 from d - - 0 1 to "
"d - - 0 0.1 step",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("print",557,G__Histogram_print_6_0,121,-1,-1,0,1,1,1,0,"u 'ostream' - 1 std::cout out",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("operator[]",1060,G__Histogram_operatoroBcB_7_0,102,-1,-1,0,1,1,1,8,"i - - 0 - n",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("step",444,G__Histogram_step_8_0,102,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("to",227,G__Histogram_to_9_0,102,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("from",436,G__Histogram_from_0_1,102,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("total",548,G__Histogram_total_1_1,102,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("under",542,G__Histogram_under_2_1,102,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("over",444,G__Histogram_over_3_1,102,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("begin",517,G__Histogram_begin_4_1,70,-1,G__defined_typename("Histogram::const_iterator"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("end",311,G__Histogram_end_5_1,70,-1,G__defined_typename("Histogram::const_iterator"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("next",447,G__Histogram_next_6_1,85,G__get_linked_tagnum(&G__MeritCintLN_Histogram),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("setTitle",846,G__Histogram_setTitle_7_1,121,-1,-1,0,1,1,1,0,"u 'string' - 1 - s",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("Histogram",942,G__Histogram_Histogram_8_1,(int)('i'),G__get_linked_tagnum(&G__MeritCintLN_Histogram),-1,0,1,1,1,0,"u 'Histogram' - 1 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~Histogram",1068,G__Histogram_wAHistogram_9_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRebinHist(void) {
   /* RebinHist */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MeritCintLN_RebinHist));
   G__memfunc_setup("RebinHist",904,G__RebinHist_RebinHist_0_0,105,G__get_linked_tagnum(&G__MeritCintLN_RebinHist),-1,0,4,1,1,0,
"C - - 10 \"default\" title d - - 0 0 from "
"d - - 0 1 to d - - 0 0.1 step",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("rebin",528,G__RebinHist_rebin_1_0,121,-1,-1,0,3,1,1,0,
"d - - 0 0 from d - - 0 1 to "
"d - - 0 0.1 step",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("fill",423,G__RebinHist_fill_2_0,121,-1,-1,0,1,1,1,0,"d - - 0 - d",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("percentile",1067,G__RebinHist_percentile_3_0,100,-1,-1,0,1,1,1,0,"d - - 0 - level","value of entry",(void*)NULL,0);
   G__memfunc_setup("getDataVal",989,G__RebinHist_getDataVal_4_0,102,-1,-1,0,1,1,1,0,"i - - 0 - i",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("RebinHist",904,G__RebinHist_RebinHist_5_0,(int)('i'),G__get_linked_tagnum(&G__MeritCintLN_RebinHist),-1,0,1,1,1,0,"u 'RebinHist' - 1 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~RebinHist",1030,G__RebinHist_wARebinHist_6_0,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAnalyze(void) {
   /* Analyze */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MeritCintLN_Analyze));
   G__memfunc_setup("Analyze",724,G__Analyze_Analyze_0_0,105,G__get_linked_tagnum(&G__MeritCintLN_Analyze),-1,0,1,1,1,0,"u 'string' - 0 \"Generic count\" name",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Analyze",724,G__Analyze_Analyze_1_0,105,G__get_linked_tagnum(&G__MeritCintLN_Analyze),-1,0,3,1,1,0,
"u 'Tuple' - 11 - t u 'string' - 11 - item_name "
"u 'string' - 11 \"\" cut_name",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Analyze",724,G__Analyze_Analyze_2_0,105,G__get_linked_tagnum(&G__MeritCintLN_Analyze),-1,0,2,1,1,0,
"u 'TupleItem' - 11 - item u 'string' - 11 \"\" cut_name",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("operator()",957,G__Analyze_operatoroPcP_4_0,105,G__get_linked_tagnum(&G__MeritCintLN_bool),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("count",553,G__Analyze_count_5_0,104,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("seen",427,G__Analyze_seen_6_0,104,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("item",431,G__Analyze_item_7_0,102,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("name",417,G__Analyze_name_8_0,117,G__get_linked_tagnum(&G__MeritCintLN_string),-1,1,0,1,1,9,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("getName",705,G__Analyze_getName_9_0,67,-1,-1,0,0,1,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("getItem",719,G__Analyze_getItem_0_1,67,-1,-1,0,0,1,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("set_name",844,G__Analyze_set_name_1_1,121,-1,-1,0,1,1,1,0,"u 'string' - 0 - newname",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("set_tuple_item",1507,G__Analyze_set_tuple_item_2_1,121,-1,-1,0,2,1,1,0,
"u 'Tuple' - 11 - t u 'string' - 0 - item_name",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("report",668,G__Analyze_report_3_1,121,-1,-1,0,1,1,1,0,"u 'ostream' - 1 - out",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("clear",519,G__Analyze_clear_4_1,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("separator",977,G__Analyze_separator_5_1,121,-1,-1,0,2,3,1,0,
"u 'ostream' - 1 - out c - - 0 '-' -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("make_label",1021,G__Analyze_make_label_6_1,117,G__get_linked_tagnum(&G__MeritCintLN_string),-1,0,1,3,1,0,"u 'string' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("showperc",875,G__Analyze_showperc_7_1,105,G__get_linked_tagnum(&G__MeritCintLN_bool),-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("showperc",875,G__Analyze_showperc_8_1,121,-1,-1,0,1,3,1,0,"i 'bool' - 0 - s",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("apply",550,(G__InterfaceMethod)NULL,105,G__get_linked_tagnum(&G__MeritCintLN_bool),-1,0,0,1,4,0,"",(char*)NULL,(void*)NULL,1);
   // automatic copy constructor
   G__memfunc_setup("Analyze",724,G__Analyze_Analyze_0_2,(int)('i'),G__get_linked_tagnum(&G__MeritCintLN_Analyze),-1,0,1,1,1,0,"u 'Analyze' - 1 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~Analyze",850,G__Analyze_wAAnalyze_1_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncPSFanalysis(void) {
   /* PSFanalysis */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MeritCintLN_PSFanalysis));
   G__memfunc_setup("PSFanalysis",1101,G__PSFanalysis_PSFanalysis_0_0,105,G__get_linked_tagnum(&G__MeritCintLN_PSFanalysis),-1,0,3,1,1,0,
"u 'Tuple' - 11 - t d - - 0 0 emin "
"d - - 0 0 emax",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("PSFanalysis",1101,G__PSFanalysis_PSFanalysis_1_0,105,G__get_linked_tagnum(&G__MeritCintLN_PSFanalysis),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("report",668,G__PSFanalysis_report_2_0,121,-1,-1,0,1,1,1,0,"u 'ostream' - 1 - out",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("clear",519,G__PSFanalysis_clear_3_0,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("count",553,G__PSFanalysis_count_4_0,104,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("percentile",1067,G__PSFanalysis_percentile_5_0,100,-1,-1,0,1,1,1,0,"d - - 0 - percent",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("sigma",529,G__PSFanalysis_sigma_6_0,100,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("minE",393,G__PSFanalysis_minE_7_0,100,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("maxE",395,G__PSFanalysis_maxE_8_0,100,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("meanE",486,G__PSFanalysis_meanE_9_0,100,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("row_report",1107,G__PSFanalysis_row_report_0_1,121,-1,-1,0,1,1,1,0,"u 'ostream' - 1 - out",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("apply",550,(G__InterfaceMethod)NULL,105,G__get_linked_tagnum(&G__MeritCintLN_bool),-1,0,0,1,4,0,"",(char*)NULL,(void*)NULL,1);
   // automatic copy constructor
   G__memfunc_setup("PSFanalysis",1101,G__PSFanalysis_PSFanalysis_2_1,(int)('i'),G__get_linked_tagnum(&G__MeritCintLN_PSFanalysis),-1,0,1,1,1,0,"u 'PSFanalysis' - 1 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~PSFanalysis",1227,G__PSFanalysis_wAPSFanalysis_3_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMultiPSF(void) {
   /* MultiPSF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MeritCintLN_MultiPSF));
   G__memfunc_setup("MultiPSF",756,G__MultiPSF_MultiPSF_0_0,105,G__get_linked_tagnum(&G__MeritCintLN_MultiPSF),-1,0,2,1,1,0,
"u 'Tuple' - 11 - t c - - 0 - code",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("report",668,G__MultiPSF_report_1_0,121,-1,-1,0,1,1,1,0,"u 'ostream' - 1 - out",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("getListSize",1143,G__MultiPSF_getListSize_2_0,105,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("getListItem",1131,G__MultiPSF_getListItem_3_0,85,G__get_linked_tagnum(&G__MeritCintLN_PSFanalysis),-1,0,1,1,1,0,"i - - 0 - idx",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("apply",550,(G__InterfaceMethod)NULL,105,G__get_linked_tagnum(&G__MeritCintLN_bool),-1,0,0,1,4,0,"",(char*)NULL,(void*)NULL,1);
   // automatic copy constructor
   G__memfunc_setup("MultiPSF",756,G__MultiPSF_MultiPSF_5_0,(int)('i'),G__get_linked_tagnum(&G__MeritCintLN_MultiPSF),-1,0,1,1,1,0,"u 'MultiPSF' - 1 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~MultiPSF",882,G__MultiPSF_wAMultiPSF_6_0,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAnalysisList(void) {
   /* AnalysisList */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MeritCintLN_AnalysisList));
   G__memfunc_setup("AnalysisList",1248,G__AnalysisList_AnalysisList_0_0,105,G__get_linked_tagnum(&G__MeritCintLN_AnalysisList),-1,0,2,1,1,0,
"u 'string' - 0 \"AnalysisList\" name i 'bool' - 0 false noline",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("AnalysisList",1248,G__AnalysisList_AnalysisList_1_0,105,G__get_linked_tagnum(&G__MeritCintLN_AnalysisList),-1,0,1,1,1,0,"u 'AnalysisList' - 1 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("report",668,G__AnalysisList_report_2_0,121,-1,-1,0,1,1,1,0,"u 'ostream' - 1 - out",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("clear",519,G__AnalysisList_clear_3_0,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("getListSize",1143,G__AnalysisList_getListSize_4_0,105,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("getListItem",1131,G__AnalysisList_getListItem_5_0,85,G__get_linked_tagnum(&G__MeritCintLN_Analyze),-1,0,1,1,1,0,"i - - 0 - idx",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("apply",550,(G__InterfaceMethod)NULL,105,G__get_linked_tagnum(&G__MeritCintLN_bool),-1,0,0,1,4,0,"",(char*)NULL,(void*)NULL,1);
   // automatic destructor
   G__memfunc_setup("~AnalysisList",1374,G__AnalysisList_wAAnalysisList_7_0,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncPSFtailCuts(void) {
   /* PSFtailCuts */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MeritCintLN_PSFtailCuts));
   G__memfunc_setup("PSFtailCuts",1074,G__PSFtailCuts_PSFtailCuts_0_0,105,G__get_linked_tagnum(&G__MeritCintLN_PSFtailCuts),-1,0,1,1,1,0,"u 'Tuple' - 11 - t",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("PSFtailCuts",1074,G__PSFtailCuts_PSFtailCuts_1_0,(int)('i'),G__get_linked_tagnum(&G__MeritCintLN_PSFtailCuts),-1,0,1,1,1,0,"u 'PSFtailCuts' - 1 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~PSFtailCuts",1200,G__PSFtailCuts_wAPSFtailCuts_2_0,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFigureOfMerit(void) {
   /* FigureOfMerit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MeritCintLN_FigureOfMerit));
   G__memfunc_setup("FigureOfMerit",1304,G__FigureOfMerit_FigureOfMerit_0_0,105,G__get_linked_tagnum(&G__MeritCintLN_FigureOfMerit),-1,0,2,1,1,0,
"u 'Tuple' - 11 - t u 'string' - 0 \"\" cutstring",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("setCuts",747,G__FigureOfMerit_setCuts_1_0,121,-1,-1,0,1,1,1,0,"u 'string' - 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("execute",755,G__FigureOfMerit_execute_2_0,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("report",668,G__FigureOfMerit_report_3_0,121,-1,-1,0,1,1,1,0,"u 'ostream' - 1 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("accept",624,G__FigureOfMerit_accept_4_0,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("accepted",825,G__FigureOfMerit_accepted_5_0,104,-1,-1,0,0,1,1,8,"","{ return m_accepted; }",(void*)NULL,0);
   G__memfunc_setup("area",409,G__FigureOfMerit_area_6_0,102,-1,-1,0,0,3,1,0,"","{return s_area;}",(void*)NULL,0);
   G__memfunc_setup("generated",943,G__FigureOfMerit_generated_7_0,104,-1,-1,0,0,3,1,0,"","{ return s_generated; }",(void*)NULL,0);
   G__memfunc_setup("getAnalysisList",1568,G__FigureOfMerit_getAnalysisList_8_0,85,G__get_linked_tagnum(&G__MeritCintLN_AnalysisList),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("FigureOfMerit",1304,G__FigureOfMerit_FigureOfMerit_9_0,(int)('i'),G__get_linked_tagnum(&G__MeritCintLN_FigureOfMerit),-1,0,1,1,1,0,"u 'FigureOfMerit' - 1 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~FigureOfMerit",1430,G__FigureOfMerit_wAFigureOfMerit_0_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmeritFoM(void) {
   /* meritFoM */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MeritCintLN_meritFoM));
   G__memfunc_setup("meritFoM",803,G__meritFoM_meritFoM_0_0,105,G__get_linked_tagnum(&G__MeritCintLN_meritFoM),-1,0,2,1,1,0,
"C - - 10 - fileName C - - 10 - cutstring",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("execute",755,G__meritFoM_execute_2_0,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("report",668,G__meritFoM_report_3_0,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("getAnalysisListSize",1979,G__meritFoM_getAnalysisListSize_4_0,105,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("getAnalysisListItem",1967,G__meritFoM_getAnalysisListItem_5_0,85,G__get_linked_tagnum(&G__MeritCintLN_Analyze),-1,0,1,1,1,0,"i - - 0 - i",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("getAnalysisList",1568,G__meritFoM_getAnalysisList_6_0,85,G__get_linked_tagnum(&G__MeritCintLN_AnalysisList),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("drawMerit",943,(G__InterfaceMethod)NULL,121,-1,-1,0,0,1,4,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("drawRunning",1167,(G__InterfaceMethod)NULL,121,-1,-1,0,0,1,4,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("drawFinished",1240,(G__InterfaceMethod)NULL,121,-1,-1,0,0,1,4,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__meritFoM_Class_0_1,85,G__get_linked_tagnum(&G__MeritCintLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Name",982,G__meritFoM_Class_Name_1_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Version",1339,G__meritFoM_Class_Version_2_1,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Dictionary",1046,G__meritFoM_Dictionary_3_1,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsA",253,G__meritFoM_IsA_4_1,85,G__get_linked_tagnum(&G__MeritCintLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__meritFoM_ShowMembers_5_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__meritFoM_Streamer_6_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__meritFoM_StreamerNVirtual_7_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__meritFoM_DeclFileName_8_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileLine",1152,G__meritFoM_DeclFileLine_9_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileName",1171,G__meritFoM_ImplFileName_0_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileLine",1178,G__meritFoM_ImplFileLine_1_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("meritFoM",803,G__meritFoM_meritFoM_2_2,(int)('i'),G__get_linked_tagnum(&G__MeritCintLN_meritFoM),-1,0,1,1,1,0,"u 'meritFoM' - 1 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~meritFoM",929,G__meritFoM_wAmeritFoM_3_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMeritPlots(void) {
   /* MeritPlots */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MeritCintLN_MeritPlots));
   G__memfunc_setup("MeritPlots",1043,G__MeritPlots_MeritPlots_0_0,105,G__get_linked_tagnum(&G__MeritCintLN_MeritPlots),-1,0,2,1,1,0,
"C - - 10 - tupleFile C - - 10 - cutString",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("run",341,G__MeritPlots_run_2_0,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("report",668,G__MeritPlots_report_3_0,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("plotPSFvals",1118,G__MeritPlots_plotPSFvals_4_0,121,-1,-1,0,1,1,1,0,"i - - 0 0 cosBin",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("plotPSFvsE",982,G__MeritPlots_plotPSFvsE_5_0,121,-1,-1,0,1,1,1,0,"U 'TPad' - 0 0 pPad",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("surfPSFvsE",983,G__MeritPlots_surfPSFvsE_6_0,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("plotPSFrat",1007,G__MeritPlots_plotPSFrat_7_0,121,-1,-1,0,1,1,1,0,"U 'TPad' - 0 0 pPad",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("getMeritFoM",1091,G__MeritPlots_getMeritFoM_8_0,85,G__get_linked_tagnum(&G__MeritCintLN_meritFoM),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("getList",732,G__MeritPlots_getList_9_0,85,G__get_linked_tagnum(&G__MeritCintLN_AnalysisList),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("getListSize",1143,G__MeritPlots_getListSize_0_1,105,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("getListObj",1015,G__MeritPlots_getListObj_1_1,85,G__get_linked_tagnum(&G__MeritCintLN_Analyze),-1,0,1,1,1,0,"i - - 0 - i",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("newCanvas",934,(G__InterfaceMethod)NULL,121,-1,-1,0,2,1,4,0,
"i - - 0 - nx i - - 0 - ny",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("drawPSFplot",1110,(G__InterfaceMethod)NULL,121,-1,-1,0,2,1,4,0,
"U 'PSFanalysis' - 0 - pPsf U 'TPad' - 0 - pPad",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("MeritPlots",1043,G__MeritPlots_MeritPlots_4_1,(int)('i'),G__get_linked_tagnum(&G__MeritCintLN_MeritPlots),-1,0,1,1,1,0,"u 'MeritPlots' - 1 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~MeritPlots",1169,G__MeritPlots_wAMeritPlots_5_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMeritCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
extern "C" void G__cpp_setup_globalMeritCint() {

   /* Setting up global variables */
   G__resetplocal();


   G__resetglobalenv();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
extern "C" void G__cpp_setup_funcMeritCint() {
   G__lastifuncposition();


   G__resetifuncposition();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MeritCintLN_bool = { "bool" , 101 , -1 };
G__linked_taginfo G__MeritCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_ostream = { "ostream" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_TupleItem = { "TupleItem" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_Tuple = { "Tuple" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_vectorlETupleItemmUcOallocatorlETupleItemmUgRsPgR = { "vector<TupleItem*,allocator<TupleItem*> >" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_vectorlETupleItemmUcOallocatorlETupleItemmUgRsPgRcLcLreverse_iterator = { "vector<TupleItem*,allocator<TupleItem*> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__MeritCintLN__RanitlETupleItemmUcOlonggR = { "_Ranit<TupleItem*,long>" , 115 , -1 };
G__linked_taginfo G__MeritCintLN_SampleStatistic = { "SampleStatistic" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_Histogram = { "Histogram" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_vectorlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator = { "vector<float,allocator<float> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__MeritCintLN__RanitlEfloatcOlonggR = { "_Ranit<float,long>" , 115 , -1 };
G__linked_taginfo G__MeritCintLN_RebinHist = { "RebinHist" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_Analyze = { "Analyze" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_PSFanalysis = { "PSFanalysis" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_MultiPSF = { "MultiPSF" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_vectorlEPSFanalysismUcOallocatorlEPSFanalysismUgRsPgR = { "vector<PSFanalysis*,allocator<PSFanalysis*> >" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_vectorlEPSFanalysismUcOallocatorlEPSFanalysismUgRsPgRcLcLreverse_iterator = { "vector<PSFanalysis*,allocator<PSFanalysis*> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__MeritCintLN__RanitlEPSFanalysismUcOlonggR = { "_Ranit<PSFanalysis*,long>" , 115 , -1 };
G__linked_taginfo G__MeritCintLN_AnalysisList = { "AnalysisList" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_vectorlEAnalyzemUcOallocatorlEAnalyzemUgRsPgR = { "vector<Analyze*,allocator<Analyze*> >" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_vectorlEAnalyzemUcOallocatorlEAnalyzemUgRsPgRcLcLreverse_iterator = { "vector<Analyze*,allocator<Analyze*> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__MeritCintLN__RanitlEAnalyzemUcOlonggR = { "_Ranit<Analyze*,long>" , 115 , -1 };
G__linked_taginfo G__MeritCintLN_PSFtailCuts = { "PSFtailCuts" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_LayerGroup = { "LayerGroup" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_FigureOfMerit = { "FigureOfMerit" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_vectorlELayerGroupcOallocatorlELayerGroupgRsPgR = { "vector<LayerGroup,allocator<LayerGroup> >" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_vectorlELayerGroupcOallocatorlELayerGroupgRsPgRcLcLreverse_iterator = { "vector<LayerGroup,allocator<LayerGroup> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__MeritCintLN__RanitlELayerGroupcOlonggR = { "_Ranit<LayerGroup,long>" , 115 , -1 };
G__linked_taginfo G__MeritCintLN_TCanvas = { "TCanvas" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_TPad = { "TPad" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_RootTuple = { "RootTuple" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_meritFoM = { "meritFoM" , 99 , -1 };
G__linked_taginfo G__MeritCintLN_MeritPlots = { "MeritPlots" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMeritCint() {
  G__MeritCintLN_bool.tagnum = -1 ;
  G__MeritCintLN_TClass.tagnum = -1 ;
  G__MeritCintLN_TObject.tagnum = -1 ;
  G__MeritCintLN_ostream.tagnum = -1 ;
  G__MeritCintLN_string.tagnum = -1 ;
  G__MeritCintLN_TupleItem.tagnum = -1 ;
  G__MeritCintLN_Tuple.tagnum = -1 ;
  G__MeritCintLN_vectorlETupleItemmUcOallocatorlETupleItemmUgRsPgR.tagnum = -1 ;
  G__MeritCintLN_vectorlETupleItemmUcOallocatorlETupleItemmUgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__MeritCintLN__RanitlETupleItemmUcOlonggR.tagnum = -1 ;
  G__MeritCintLN_SampleStatistic.tagnum = -1 ;
  G__MeritCintLN_Histogram.tagnum = -1 ;
  G__MeritCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__MeritCintLN_vectorlEfloatcOallocatorlEfloatgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__MeritCintLN__RanitlEfloatcOlonggR.tagnum = -1 ;
  G__MeritCintLN_RebinHist.tagnum = -1 ;
  G__MeritCintLN_Analyze.tagnum = -1 ;
  G__MeritCintLN_PSFanalysis.tagnum = -1 ;
  G__MeritCintLN_MultiPSF.tagnum = -1 ;
  G__MeritCintLN_vectorlEPSFanalysismUcOallocatorlEPSFanalysismUgRsPgR.tagnum = -1 ;
  G__MeritCintLN_vectorlEPSFanalysismUcOallocatorlEPSFanalysismUgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__MeritCintLN__RanitlEPSFanalysismUcOlonggR.tagnum = -1 ;
  G__MeritCintLN_AnalysisList.tagnum = -1 ;
  G__MeritCintLN_vectorlEAnalyzemUcOallocatorlEAnalyzemUgRsPgR.tagnum = -1 ;
  G__MeritCintLN_vectorlEAnalyzemUcOallocatorlEAnalyzemUgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__MeritCintLN__RanitlEAnalyzemUcOlonggR.tagnum = -1 ;
  G__MeritCintLN_PSFtailCuts.tagnum = -1 ;
  G__MeritCintLN_LayerGroup.tagnum = -1 ;
  G__MeritCintLN_FigureOfMerit.tagnum = -1 ;
  G__MeritCintLN_vectorlELayerGroupcOallocatorlELayerGroupgRsPgR.tagnum = -1 ;
  G__MeritCintLN_vectorlELayerGroupcOallocatorlELayerGroupgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__MeritCintLN__RanitlELayerGroupcOlonggR.tagnum = -1 ;
  G__MeritCintLN_TCanvas.tagnum = -1 ;
  G__MeritCintLN_TPad.tagnum = -1 ;
  G__MeritCintLN_RootTuple.tagnum = -1 ;
  G__MeritCintLN_meritFoM.tagnum = -1 ;
  G__MeritCintLN_MeritPlots.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMeritCint() {

   /* Setting up class,struct,union tag entry */
   G__tagtable_setup(G__get_linked_tagnum(&G__MeritCintLN_TupleItem),sizeof(TupleItem),-1,2304,(char*)NULL,G__setup_memvarTupleItem,G__setup_memfuncTupleItem);
   G__tagtable_setup(G__get_linked_tagnum(&G__MeritCintLN_Tuple),sizeof(Tuple),-1,1024,(char*)NULL,G__setup_memvarTuple,G__setup_memfuncTuple);
   G__tagtable_setup(G__get_linked_tagnum(&G__MeritCintLN_SampleStatistic),sizeof(SampleStatistic),-1,1280,(char*)NULL,G__setup_memvarSampleStatistic,G__setup_memfuncSampleStatistic);
   G__tagtable_setup(G__get_linked_tagnum(&G__MeritCintLN_Histogram),sizeof(Histogram),-1,1280,(char*)NULL,G__setup_memvarHistogram,G__setup_memfuncHistogram);
   G__tagtable_setup(G__get_linked_tagnum(&G__MeritCintLN_RebinHist),sizeof(RebinHist),-1,256,(char*)NULL,G__setup_memvarRebinHist,G__setup_memfuncRebinHist);
   G__tagtable_setup(G__get_linked_tagnum(&G__MeritCintLN_Analyze),sizeof(Analyze),-1,1280,(char*)NULL,G__setup_memvarAnalyze,G__setup_memfuncAnalyze);
   G__tagtable_setup(G__get_linked_tagnum(&G__MeritCintLN_PSFanalysis),sizeof(PSFanalysis),-1,256,(char*)NULL,G__setup_memvarPSFanalysis,G__setup_memfuncPSFanalysis);
   G__tagtable_setup(G__get_linked_tagnum(&G__MeritCintLN_MultiPSF),sizeof(MultiPSF),-1,0,(char*)NULL,G__setup_memvarMultiPSF,G__setup_memfuncMultiPSF);
   G__tagtable_setup(G__get_linked_tagnum(&G__MeritCintLN_AnalysisList),sizeof(AnalysisList),-1,768,(char*)NULL,G__setup_memvarAnalysisList,G__setup_memfuncAnalysisList);
   G__tagtable_setup(G__get_linked_tagnum(&G__MeritCintLN_PSFtailCuts),sizeof(PSFtailCuts),-1,0,(char*)NULL,G__setup_memvarPSFtailCuts,G__setup_memfuncPSFtailCuts);
   G__tagtable_setup(G__get_linked_tagnum(&G__MeritCintLN_FigureOfMerit),sizeof(FigureOfMerit),-1,0,(char*)NULL,G__setup_memvarFigureOfMerit,G__setup_memfuncFigureOfMerit);
   G__tagtable_setup(G__get_linked_tagnum(&G__MeritCintLN_meritFoM),sizeof(meritFoM),-1,29696,(char*)NULL,G__setup_memvarmeritFoM,G__setup_memfuncmeritFoM);
   G__tagtable_setup(G__get_linked_tagnum(&G__MeritCintLN_MeritPlots),sizeof(MeritPlots),-1,1024,(char*)NULL,G__setup_memvarMeritPlots,G__setup_memfuncMeritPlots);
}
extern "C" void G__cpp_setupMeritCint(void) {
  G__check_setup_version(30051503,"G__cpp_setupMeritCint()");
  G__set_cpp_environmentMeritCint();
  G__cpp_setup_tagtableMeritCint();

  G__cpp_setup_inheritanceMeritCint();

  G__cpp_setup_typetableMeritCint();

  G__cpp_setup_memvarMeritCint();

  G__cpp_setup_memfuncMeritCint();
  G__cpp_setup_globalMeritCint();
  G__cpp_setup_funcMeritCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMeritCint();
  return;
}
class G__cpp_setup_initMeritCint {
  public:
    G__cpp_setup_initMeritCint() { G__add_setup_func("MeritCint",(G__incsetup)(&G__cpp_setupMeritCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMeritCint() { G__remove_setup_func("MeritCint"); }
};
G__cpp_setup_initMeritCint G__cpp_setup_initializerMeritCint;

